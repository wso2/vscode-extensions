name: Build and run Tests

on: 
  workflow_call:
    inputs: 
      runOnAWS:
        default: false
        type: boolean
      awsRunnerId:
        default: 'codebuild-wso2_vscode-extensions-${{ github.run_id }}-${{ github.run_attempt }}'
        type: string  
      isPreRelease:
        default: true
        type: boolean  
      enableCache:
        default: true
        type: boolean  
      ballerina:
        description: Update Ballerina extension version
        type: boolean
        required: false
        default: false
      wso2-platform:
        description: Update WSO2 Platform extension version
        type: boolean
        required: false
        default: false   
      choreo:
        description: Update Choreo extension version
        type: boolean
        required: false
        default: false   
      apk:
        description: Update APK extension version
        type: boolean
        required: false
        default: false  
      bi:
        description: Update BI extension version
        type: boolean
        required: false
        default: false           
      mi:
        description: Update MI extension version
        type: boolean
        required: false
        default: false                     
      version:
        default: 'N/A'
        type: string
        required: false
      isReleaseBuild:  
        type: boolean
        default: false
      runTests:
        type: boolean
        required: false
        default: false
      enableE2ETests:
        type: boolean
        required: false
        default: false 
      runBIE2ETests:
        type: boolean
        required: false
        default: false  
      runMIE2ETests:
        type: boolean
        required: false
        default: false 

env:
  ballerina_version: 2201.7.2
  ballerina_zip_url: https://github.com/ballerina-platform/ballerina-distribution/releases/download/v2201.7.2/ballerina-2201.7.2-swan-lake.zip
  ballerina_deb_url: https://dist.ballerina.io/downloads/2201.7.2/ballerina-2201.7.2-swan-lake-linux-x64.deb

jobs:
  Build_Stage:
    name: Build repo
    timeout-minutes: 45
    runs-on: ${{ inputs.runOnAWS && inputs.awsRunnerId || 'ubuntu-latest' }}
    outputs:
      runBalExtTests: ${{ steps.testMatrix.outputs.runBalExtTests }}
      runChoreoExtTests: ${{ steps.testMatrix.outputs.runChoreoExtTests }}
      runMIExtTests: ${{ steps.testMatrix.outputs.runMIExtTests }}
      runAPKExtTests: ${{ steps.testMatrix.outputs.runAPKExtTests }}
      runBIExtTests: ${{ steps.testMatrix.outputs.runBIExtTests }}
      uiTestMatrix: ${{ steps.testMatrix.outputs.uiTestMatrix }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Analyze diff
        shell: bash
        id: diff
        run: |
          testArray=""
          echo "hasBalDiff=false" >> $GITHUB_OUTPUT
          echo "hasChoreoDiff=false" >> $GITHUB_OUTPUT
          echo "hasMIDiff=false" >> $GITHUB_OUTPUT

          # Get list of all changed files in the PR
          if [[ ${{ inputs.isReleaseBuild }} = 'true' ]]; then
            git fetch origin main
            CHANGED_DIRS=$(git diff --name-only HEAD..refs/remotes/origin/main | grep -E "^/*" || true)
          else
            CHANGED_DIRS=$(git diff --name-only HEAD^..HEAD | grep -E "^/*" || true)
          fi

          echo $CHANGED_DIRS[@]

          # Ballerina ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/ballerina" ]]; then
            echo "hasBalDiff=true" >> $GITHUB_OUTPUT
          fi 

          # Choreo ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/choreo" ]]; then
            echo "hasChoreoDiff=true" >> $GITHUB_OUTPUT
          fi

          # MI ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/mi" ]]; then
              echo "hasMIDiff=true" >> $GITHUB_OUTPUT
          fi
          
          # APK ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/apk" ]]; then
            echo "hasAPKDiff=true" >> $GITHUB_OUTPUT
          fi

          # BI ext
          if [[ "${CHANGED_DIRS[@]}" =~ "workspaces/bi" ]]; then
            echo "hasBIDiff=true" >> $GITHUB_OUTPUT
          fi

          # Common
          if  [[ "${CHANGED_DIRS[@]}" =~ "workspaces/common-libs" || "${CHANGED_DIRS[@]}" =~ "common" || "${CHANGED_DIRS[@]}" =~ ".github" || "${CHANGED_DIRS[@]}" =~ "^/*.json" ]]; then
            echo "Have changes in common libs"
            echo "hasBalDiff=true" >> $GITHUB_OUTPUT
            echo "hasChoreoDiff=true" >> $GITHUB_OUTPUT
            echo "hasAPKDiff=true" >> $GITHUB_OUTPUT
            echo "hasBIDiff=true" >> $GITHUB_OUTPUT
            echo "hasMIDiff=true" >> $GITHUB_OUTPUT
          fi

      - name: Set test matrix
        shell: bash
        id: testMatrix
        run: |
          echo "Ballerina Tests: ${{ steps.diff.outputs.hasBalDiff }}"
          echo "runBalExtTests=${{ steps.diff.outputs.hasBalDiff }}" >> $GITHUB_OUTPUT
          echo "Choreo Tests: ${{ steps.diff.outputs.hasChoreoDiff }}"
          echo "runChoreoExtTests=${{ steps.diff.outputs.hasChoreoDiff }}" >> $GITHUB_OUTPUT
          echo "runAPKExtTests=${{ steps.diff.outputs.hasAPKDiff }}" >> $GITHUB_OUTPUT
          echo "runBIExtTests=${{ steps.diff.outputs.hasBIDiff }}" >> $GITHUB_OUTPUT
          echo "MI Tests: ${{ steps.diff.outputs.hasMIDiff }}"
          echo "runMIExtTests=${{ steps.diff.outputs.hasMIDiff }}" >> $GITHUB_OUTPUT

          # Dynamically set the matrix for UI tests
          matrix=$(jq -n '{"include": []}')

          if [[ "${{ inputs.runMIE2ETests }}" == "true" || ("${{ inputs.enableE2ETests }}" == "true" && "${{ steps.diff.outputs.hasMIDiff }}" == "true") || ("${{ inputs.isReleaseBuild}}" == "true" && "${{ inputs.mi }}" == "true") ]]; then
            echo "Including MI UI tests in the matrix"
            matrix=$(echo "$matrix" | jq '.include += [
              { "name": "MI", "group": "group1", "path": "mi/mi-extension", "os": "linux" },
              { "name": "MI", "group": "group2", "path": "mi/mi-extension", "os": "linux" },
              { "name": "MI", "group": "group3", "path": "mi/mi-extension", "os": "linux" },
              { "name": "MI", "group": "group4", "path": "mi/mi-extension", "os": "linux" },
              { "name": "MI", "group": "group1", "path": "mi/mi-extension", "os": "windows" },
              { "name": "MI", "group": "group2", "path": "mi/mi-extension", "os": "windows" },
              { "name": "MI", "group": "group3", "path": "mi/mi-extension", "os": "windows" },
              { "name": "MI", "group": "group4", "path": "mi/mi-extension", "os": "windows" }
            ]')
          fi

          if [[ "${{ inputs.runBIE2ETests }}" == "true" || ("${{ inputs.enableE2ETests }}" == "true" && "${{ steps.diff.outputs.hasBIDiff }}" == "true")  ]]; then
            echo "Including BI UI tests in the matrix"
            matrix=$(echo "$matrix" | jq '.include += [{ "name": "BI", "group": "group1", "path": "bi/bi-extension", "os": "linux" }]')
          fi

          # Remove "include" from matrix if it is empty to avoid GitHub Actions errors
          if [[ "$(echo "$matrix" | jq '.include | length')" == "0" ]]; then
            matrix=$(echo "$matrix" | jq 'del(.include)')
          fi

          # Write the matrix as a single-line JSON to GITHUB_OUTPUT
          echo "uiTestMatrix=$(echo "$matrix" | jq -c .)" >> $GITHUB_OUTPUT
          echo "Matrix: $(echo "$matrix" | jq -c .)"

      - name: Build
        uses: ./.github/actions/build
        with:
          isPreRelease: ${{ inputs.isPreRelease }}
          enableCache: ${{ inputs.enableCache }}
          enableLSCache: ${{ !inputs.isReleaseBuild }}
          ballerina: ${{ inputs.ballerina }}
          choreo: ${{ inputs.choreo }}
          wso2-platform: ${{ inputs.wso2-platform }}
          apk: ${{ inputs.apk }}
          bi: ${{ inputs.bi }}
          mi: ${{ inputs.mi }}
          version: ${{ inputs.version }}
          token: ${{ secrets.CHOREO_BOT_TOKEN }}
          BALLERINA_AUTH_ORG: ${{ secrets.BALLERINA_AUTH_ORG }}
          BALLERINA_AUTH_CLIENT_ID: ${{ secrets.BALLERINA_AUTH_CLIENT_ID }}
          MI_AUTH_ORG: ${{ secrets.MI_AUTH_ORG }}
          MI_AUTH_CLIENT_ID: ${{ secrets.MI_AUTH_CLIENT_ID }}
          PLATFORM_DEFAULT_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_DEFAULT_GHAPP_CLIENT_ID }}
          PLATFORM_DEFAULT_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_DEFAULT_DEVANT_ASGARDEO_CLIENT_ID }}
          PLATFORM_STAGE_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_STAGE_GHAPP_CLIENT_ID }}
          PLATFORM_STAGE_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_STAGE_DEVANT_ASGARDEO_CLIENT_ID }}
          PLATFORM_DEV_GHAPP_CLIENT_ID: ${{ secrets.PLATFORM_DEV_GHAPP_CLIENT_ID }}
          PLATFORM_DEV_DEVANT_ASGARDEO_CLIENT_ID: ${{ secrets.PLATFORM_DEV_DEVANT_ASGARDEO_CLIENT_ID }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '1'
          timeout: '10m'
          skip-dirs: 'common/temp'
          ignore-unfixed: true

  ExtTest_Ballerina:
    name: Run Ballerina extension tests
    needs: Build_Stage
    if: false
    # if: ${{ inputs.runTests || (inputs.isReleaseBuild && (inputs.ballerina || inputs.bi)) || needs.Build_Stage.outputs.runBalExtTests == 'true' || github.base_ref == 'release-ballerina' }}
    timeout-minutes: 45
    runs-on: ${{ inputs.runOnAWS && inputs.awsRunnerId || 'ubuntu-latest' }}
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Set up Ballerina
        id: set-version
        run: |
          cd workspaces/ballerina/ballerina-extension
          mkdir extractedDistribution
          wget ${{ env.ballerina_zip_url }}
          unzip -qq ./ballerina-${{ env.ballerina_version }}-swan-lake.zip -d ./extractedDistribution
          rm ballerina-${{ env.ballerina_version }}-swan-lake.zip
          balVersion=$(ls ./extractedDistribution)
          balHome=./extractedDistribution/$balVersion
          echo "balVersion=$balVersion" >> $GITHUB_OUTPUT
          echo "balHome=$balHome" >> $GITHUB_OUTPUT

          echo "$balHome/bin" >> $GITHUB_PATH

      - name: Run Test
        run: |
          cd workspaces/ballerina/ballerina-extension
          xvfb-run --auto-servernum pnpm run test
        env:
          balVersion: ${{ steps.set-version.outputs.balVersion }}
          balHome: ${{ steps.set-version.outputs.balHome }}

  ExtTest_MI:
    name: Run MI diagram tests
    needs: Build_Stage
    if: ${{ inputs.runTests || (inputs.isReleaseBuild && inputs.mi) || needs.Build_Stage.outputs.runMIExtTests == 'true' || github.base_ref == 'release-mi' }}
    timeout-minutes: 30
    runs-on: ${{ inputs.runOnAWS && inputs.awsRunnerId || 'ubuntu-latest' }}
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        run: |
          unzip build.zip
          rm build.zip

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Run Test
        run: |
          cd workspaces/mi/mi-diagram
          xvfb-run --auto-servernum pnpm run test

  UITest:
    name: Run UI tests
    needs: Build_Stage
    timeout-minutes: 60
    if: ${{ needs.Build_Stage.outputs.uiTestMatrix != '{}' }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.Build_Stage.outputs.uiTestMatrix) }}
    runs-on: ${{ ((matrix.os == 'linux' && inputs.runOnAWS) && inputs.awsRunnerId )|| (matrix.os == 'linux' && 'ubuntu-latest') || (matrix.os == 'windows' && 'windows-latest') }}
    steps:
      - name: Restore build
        uses: actions/download-artifact@v4
        with:
          name: ExtBuild
          path: ./

      - name: Set up workspace
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            unzip build.zip
            rm build.zip
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            7z x -aoa build.zip
            rm build.zip
            pip install setuptools
          fi

      - name: Setup Rush
        uses: gigara/setup-rush@v1.2.0
        with:
          pnpm: 10.10.0
          node: 22.x
          rush-install: true

      - name: Check for previous test results
        shell: bash
        if: github.run_attempt > 1
        run: |
          PREVIOUS_ATTEMPT=$((${{ github.run_attempt }} - 1))
          echo "PREVIOUS_ATTEMPT=$PREVIOUS_ATTEMPT" >> $GITHUB_ENV
        
      - name: Download previous test results
        id: check-results
        if: github.run_attempt > 1
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: ${{ matrix.name }}-e2e-test-results-${{ matrix.group }}-${{ env.PREVIOUS_ATTEMPT }}
          path: workspaces/${{ matrix.path }}/test-results

      - name: install packages
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            # Install FFmpeg for Windows screen recording
            choco install ffmpeg -y
            cd workspaces/${{ matrix.path }} && npx playwright install --with-deps    
          else
            sudo apt-get update -y
            sudo apt-get install -y xvfb ffmpeg gnome-keyring libsecret-1.0 dbus-x11
            cd workspaces/${{ matrix.path }} && npx playwright install
          fi
          
      - name: Set screen resolution in Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          Set-DisplayResolution -Width 1920 -Height 1080 -Force    

      - name: Run Tests (First Attempt)
        shell: bash
        id: run-tests-first
        if: github.run_attempt == 1 || steps.check-results.outcome == 'failure'
        continue-on-error: true
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cd workspaces/${{ matrix.path }}
            # Run tests
            npx playwright test --grep ${{ matrix.group }}
          else
            export $(dbus-launch)
            export DISPLAY=:98.0
            cd workspaces/${{ matrix.path }}
            xvfb-run --server-num 98.0 -s "-ac -screen 0 1920x1080x24" bash -c "ffmpeg -f x11grab -r 30 -s 1920x1080 -i :98.0 -c:v libx264 -preset ultrafast -pix_fmt yuv420p -movflags +faststart -hide_banner -loglevel error record.mp4 & npx playwright test --grep ${{ matrix.group }}"
          fi

      - name: Run Failed Tests (Re-run)
        shell: bash
        if: steps.run-tests-first.outcome == 'failure' || steps.check-results.outcome == 'success'
        run: |
          rm -rf workspaces/mi/mi-extension/src/test/e2e-playwright-tests/data/new-project
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cd workspaces/${{ matrix.path }}
            # Run failed tests
            npx playwright test --grep ${{ matrix.group }} --last-failed
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            cd workspaces/${{ matrix.path }} && npx playwright test --grep ${{ matrix.group }} --last-failed
          else
            export $(dbus-launch)
            export DISPLAY=:98.0
            cd workspaces/${{ matrix.path }}
            xvfb-run --server-num 98.0 -s "-ac -screen 0 1920x1080x24" bash -c "ffmpeg -f x11grab -r 30 -s 1920x1080 -i :98.0 -c:v libx264 -preset ultrafast -pix_fmt yuv420p -movflags +faststart -hide_banner -loglevel error record.mp4 & npx playwright test --grep ${{ matrix.group }} --last-failed"
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}I-e2e-test-results-${{ matrix.os }}-${{ matrix.group }}-${{ github.run_attempt }}
          path: workspaces/${{ matrix.path }}/test-results/**
          retention-days: 5
          include-hidden-files: true
          
      - name: Upload recordings
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-e2e-test-recording-${{ matrix.os }}-${{ matrix.group }}-${{ github.run_attempt }}
          path: | 
            workspaces/${{ matrix.path }}/src/test/test-resources/videos/**
            workspaces/${{ matrix.path }}/src/test/test-resources/screenshots/**
            workspaces/${{ matrix.path }}/record.mp4
          retention-days: 5

      - name: Upload log files
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-e2e-test-logs-${{ matrix.os }}-${{ matrix.group }}-${{ github.run_attempt }}
          path: | 
            workspaces/mi/mi-extension/src/test/test-resources/logs/**
          retention-days: 5
      - name: Upload Project Data Directory
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.name }}-e2e-test-project-${{ matrix.os }}-${{ matrix.group }}-${{ github.run_attempt }}
          path: |
            workspaces/mi/mi-extension/src/test/e2e-playwright-tests/data/new-project/**
          retention-days: 5
